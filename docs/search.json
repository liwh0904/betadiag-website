[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Diagnostics and Remedy Tools for Beta Diversity Analysis",
    "section": "",
    "text": "Welcome to Betadiag\nThis website contains resources and posts for the Betadiag project. The website also contains the code for the paper ‘Enhanced Pattern Recognition and Biomarker Identification through Beta Diversity Analysis in Microbiome Data’ by Zihan Zhu, Yiqian Zhang, Wenhao Li and Liangliang Zhang."
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "Diagnostics and Remedy Tools for Beta Diversity Analysis",
    "section": "",
    "text": "type: default\ncontents: posts"
  },
  {
    "objectID": "posts/Installation/index.html",
    "href": "posts/Installation/index.html",
    "title": "Installation",
    "section": "",
    "text": "To install the development version of Betadiag from GitHub:\n\n# Install devtools if not already installed\n# install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\ndevtools::install_github(\"bioscinema/Betadiag\")\n\nSkipping install of 'Betadiag' from a github remote, the SHA1 (fabfe08b) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(Betadiag)\n\nYou can also use Betadiag through our web-based Shiny app. Simply upload or paste your distance matrix and metadata to run diagnostics directly in your browser — no installation needed, and no data is saved."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "End-to-end demo: weighted UniFrac on IBD 16S data",
    "section": "",
    "text": "This is a post with executable code.\n\n# Install Betadiag (dev) and dependencies ---------------------------------\n# install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\n#devtools::install_github(\"bioscinema/Betadiag\")\n\n\n## Using GitHub PAT from the git credential store.\n\n## Skipping install of 'Betadiag' from a github remote, the SHA1 (bf9bbd2c) has not changed since last install.\n##   Use `force = TRUE` to force installation\n\n\n## Using GitHub PAT from the git credential store.\n\n## Skipping install of 'Betadiag' from a github remote, the SHA1 (bf9bbd2c) has not changed since last install.\n##   Use `force = TRUE` to force installation\nlibrary(Betadiag)\nlibrary(phyloseq)\nlibrary(ggplot2)\n\n# Load dataset ------------------------------------------------------------\nload(\"RealData/IBD_16s_data_V4.RData\")\n\n# ---- Data cleaning ------------------------------------------------------\nsample_data &lt;- sample_data(phy1)\nrows_with_na &lt;- apply(\n  sample_data[, c(1, 18, 50, 57, 115, 126, 127)],\n  1,\n  function(x) any(x %in% c(\"not providednot provided\",\n                           \"-88\",\n                           \"not provided\",\n                           \"cd (from uc 7/17/2018)\"))\n)\nphyseq &lt;- prune_samples(!rows_with_na, phy1)\n\nmetadata &lt;- data.frame(\n  diagnosis         = as.factor(physeq@sam_data$diagnosis),\n  age_at_diagnosis  = as.numeric(physeq@sam_data$age_at__diagnosis),\n  host_age          = as.numeric(physeq@sam_data$host_age),\n  host_height       = as.numeric(physeq@sam_data$host_height),\n  race              = physeq@sam_data$race,\n  sex               = as.numeric(ifelse(physeq@sam_data$sex == \"male\", 1, 0)),\n  smoking           = as.numeric(ifelse(physeq@sam_data$smoking == \"n\", 0, 1))\n)\n\n# ---- Diagnostics --------------------------------------------------------\nwu_dist   &lt;- phyloseq::distance(physeq, method = \"wunifrac\")\nwu_matrix &lt;- as.matrix(wu_dist)\n\nwu.check &lt;- check_distance(wu_matrix)\nwu.check$is.metric\n\n[1] 0\n\n\n\nwu.check$is.Euclidean\n\n[1] 0\n\n\n\nwu.check$FNI\n\n[1] 0.1180882\n\n\n\nplot(wu.check$collinearity.score,xlab = \"Sample\",ylab = \"Collinearity Score\")"
  },
  {
    "objectID": "posts/Introduction/index.html",
    "href": "posts/Introduction/index.html",
    "title": "Introduction",
    "section": "",
    "text": "Betadiag is an R package designed to diagnose, evaluate, and correct issues in beta diversity analysis, particularly when working with dissimilarity matrices from ecological and microbiome studies. It provides tools to assess matrix properties, perform ordination and statistical evaluation, and apply remedies to ensure valid analysis."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Betadiag",
    "section": "",
    "text": "The code for the paper ‘Enhanced Pattern Recognition and Biomarker Identification through Beta Diversity Analysis in Microbiome Data’."
  },
  {
    "objectID": "Installation.html",
    "href": "Installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install the development version of Betadiag from GitHub:\n\n# Install devtools if not already installed\n# install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\ndevtools::install_github(\"bioscinema/Betadiag\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'Betadiag' from a github remote, the SHA1 (fabfe08b) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(Betadiag)\n\nYou can also use Betadiag through our web-based Shiny app. Simply upload or paste your distance matrix and metadata to run diagnostics directly in your browser — no installation needed, and no data is saved."
  },
  {
    "objectID": "posts/Introduction/Introduction.html",
    "href": "posts/Introduction/Introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Betadiag is an R package designed to diagnose, evaluate, and correct issues in beta diversity analysis, particularly when working with dissimilarity matrices from ecological and microbiome studies. It provides tools to assess matrix properties, perform ordination and statistical evaluation, and apply remedies to ensure valid analysis."
  },
  {
    "objectID": "posts/post-with-code/Example_code.html",
    "href": "posts/post-with-code/Example_code.html",
    "title": "End-to-end demo: weighted UniFrac on IBD 16S data",
    "section": "",
    "text": "This is a post with executable code.\n\n# Install Betadiag (dev) and dependencies ---------------------------------\n# install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\n#devtools::install_github(\"bioscinema/Betadiag\")\n\n\n## Using GitHub PAT from the git credential store.\n\n## Skipping install of 'Betadiag' from a github remote, the SHA1 (bf9bbd2c) has not changed since last install.\n##   Use `force = TRUE` to force installation\n\n\n## Using GitHub PAT from the git credential store.\n\n## Skipping install of 'Betadiag' from a github remote, the SHA1 (bf9bbd2c) has not changed since last install.\n##   Use `force = TRUE` to force installation\nlibrary(Betadiag)\nlibrary(phyloseq)\nlibrary(ggplot2)\n\n# Load dataset ------------------------------------------------------------\nload(\"RealData/IBD_16s_data_V4.RData\")\n\n# ---- Data cleaning ------------------------------------------------------\nsample_data &lt;- sample_data(phy1)\nrows_with_na &lt;- apply(\n  sample_data[, c(1, 18, 50, 57, 115, 126, 127)],\n  1,\n  function(x) any(x %in% c(\"not providednot provided\",\n                           \"-88\",\n                           \"not provided\",\n                           \"cd (from uc 7/17/2018)\"))\n)\nphyseq &lt;- prune_samples(!rows_with_na, phy1)\n\nmetadata &lt;- data.frame(\n  diagnosis         = as.factor(physeq@sam_data$diagnosis),\n  age_at_diagnosis  = as.numeric(physeq@sam_data$age_at__diagnosis),\n  host_age          = as.numeric(physeq@sam_data$host_age),\n  host_height       = as.numeric(physeq@sam_data$host_height),\n  race              = physeq@sam_data$race,\n  sex               = as.numeric(ifelse(physeq@sam_data$sex == \"male\", 1, 0)),\n  smoking           = as.numeric(ifelse(physeq@sam_data$smoking == \"n\", 0, 1))\n)\n\n# ---- Diagnostics --------------------------------------------------------\nwu_dist   &lt;- phyloseq::distance(physeq, method = \"wunifrac\")\nwu_matrix &lt;- as.matrix(wu_dist)\n\nwu.check &lt;- check_distance(wu_matrix)\nwu.check$is.metric\n\n[1] 0\n\n\n\nwu.check$is.Euclidean\n\n[1] 0\n\n\n\nwu.check$FNI\n\n[1] 0.1180882\n\n\n\nplot(wu.check$collinearity.score,xlab = \"Sample\",ylab = \"Collinearity Score\") \n\n\n\n\n\n\n\n\nCollinearity plot – Every point sits at ≈ −1, meaning each sample’s distance vector is almost perfectly anti-parallel to the average vector. In practice, this indicates very little pairwise collinearity, so angle-preserving (metric) ordinations shouldn’t be distorted by redundant information.\n\nplot(wu.check$nonlinearity.score,xlab = \"Sample\",ylab = \"Nonlinearity Score\") \n\n\n\n\n\n\n\n\nNon-linearity plot – Scores vary widely, with several pronounced spikes, showing substantial non-linear distortion across samples. Linear methods such as classical PCoA may mis-represent true relationships; non-linear embeddings (t-SNE, UMAP) or a PSD remedy are advisable before interpretation.\n\n# ---- Baseline evaluation ------------------------------------------------\nwu.evalution &lt;- evaluate_beta(\n  wu_matrix,\n  as.data.frame(metadata[, 1]),  # Y\n  as.data.frame(metadata[, -1]), # Z\n  metadata\n)\nwu.evalution$PCo1.rate\n\n[1] 0.1474114\n\n\n\nwu.evalution$PCo2.rate\n\n[1] 0.08727701\n\n\n\nwu.evalution$PCoA.valid\n\n[1] FALSE\n\n\n\nwu.evalution$pseudo_F\n\n[1] 0.9864256\n\n\n\nwu.evalution$pseudo_R2\n\n[1] 0.07595821\n\n\n\nwu.evalution$permanova_p\n\n[1] 0.4914915\n\n\n\nwu.evalution$MiRKAT_R2\n\n[1] 0.01034452\n\n\n\n# ---- Remedies -----------------------------------------------------------\n# Higham projection\nwu.higham           &lt;- remedy_gram(wu_matrix, method = \"Higham\")\nwu.higham.evalution &lt;- evaluate_beta_gram(\n  wu.higham,\n  as.data.frame(metadata[, 1]),\n  as.data.frame(metadata[, -1]),\n  metadata\n)\nwu.higham.evalution$PCo1.rate\n\n[1] 0.1671499\n\n\n\nwu.higham.evalution$PCo2.rate\n\n[1] 0.09896342\n\n\n\nwu.higham.evalution$PCoA.valid\n\n[1] TRUE\n\n\n\nwu.higham.evalution$pseudo_F\n\n[1] 1.113382\n\n\n\nwu.higham.evalution$pseudo_R2\n\n[1] 0.08490423\n\n\n\nwu.higham.evalution$permanova_p\n\n[1] 0.2082082\n\n\n\nwu.higham.evalution$MiRKAT_R2\n\n[1] 0.01202306\n\n\n\nwu.higham.euclidean &lt;- euclidean_check(wu.higham)\nwu.higham.euclidean\n\n$FNI\n[1] 0\n\n$is.Euclidean\n[1] 1\n\n\n\n# Tikhonov ridge (ε = 0)\nwu.tik           &lt;- remedy_gram(wu_matrix, method = \"Tikhonov\", epsilon = 0)\nwu.tik.evalution &lt;- evaluate_beta_gram(\n  wu.tik,\n  as.data.frame(metadata[, 1]),\n  as.data.frame(metadata[, -1]),\n  metadata\n)\nwu.tik.evalution$PCo1.rate\n\n[1] 0.01749814\n\n\n\nwu.tik.evalution$PCo2.rate\n\n[1] 0.01244613\n\n\n\nwu.tik.evalution$PCoA.valid\n\n[1] TRUE\n\n\n\nwu.tik.evalution$pseudo_F\n\n[1] 1.069095\n\n\n\nwu.tik.evalution$pseudo_R2\n\n[1] 0.08180331\n\n\n\nwu.tik.evalution$permanova_p\n\n[1] 0.3623624\n\n\n\nwu.tik.evalution$MiRKAT_R2\n\n[1] 0.005982887\n\n\n\nwu.tik.euclidean &lt;- euclidean_check(wu.tik)\nwu.tik.euclidean\n\n$FNI\n[1] 0\n\n$is.Euclidean\n[1] 1\n\n\n\n# ---- Quick comparison table --------------------------------------------\ndata.frame(\n  Matrix      = c(\"Raw\", \"Higham\", \"Tikhonov\"),\n  Euclidean   = c(wu.check$is.Euclidean,\n                  wu.higham.euclidean$is.Euclidean,\n                  wu.tik.euclidean$is.Euclidean),\n  Pseudo_R2   = c(wu.evalution$pseudo_R2,\n                  wu.higham.evalution$pseudo_R2,\n                  wu.tik.evalution$pseudo_R2),\n  PERM_pval   = c(wu.evalution$permanova_p,\n                  wu.higham.evalution$permanova_p,\n                  wu.tik.evalution$permanova_p)\n)\n\n    Matrix Euclidean  Pseudo_R2 PERM_pval\n1      Raw         0 0.07595821 0.4914915\n2   Higham         1 0.08490423 0.2082082\n3 Tikhonov         1 0.08180331 0.3623624"
  },
  {
    "objectID": "posts/Installation/Installation.html",
    "href": "posts/Installation/Installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install the development version of Betadiag from GitHub:\n\n# Install devtools if not already installed\n# install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\ndevtools::install_github(\"bioscinema/Betadiag\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'Betadiag' from a github remote, the SHA1 (fabfe08b) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(Betadiag)\n\nYou can also use Betadiag through our web-based Shiny app. Simply upload or paste your distance matrix and metadata to run diagnostics directly in your browser — no installation needed, and no data is saved."
  }
]